
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000847  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000215  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  7a:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
void LCD_init();

#endif
void LCD_command(char cmd)
{
	LCD_SIG_PORT &= ~(1 << RW);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7d       	andi	r25, 0xDF	; 223
  86:	92 bb       	out	0x12, r25	; 18
	LCD_SIG_PORT &= ~(1 << RS);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9f 7b       	andi	r25, 0xBF	; 191
  8c:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT = cmd;
  8e:	85 bb       	out	0x15, r24	; 21
	LCD_SIG_PORT |= (1 << EN);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	80 68       	ori	r24, 0x80	; 128
  94:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_command+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_command+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_SIG_PORT &= ~(1 << EN);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	8d ee       	ldi	r24, 0xED	; 237
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_command+0x30>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_char>:
	_delay_ms(3);
}

void LCD_char(const unsigned char data)
{
	LCD_SIG_PORT &= ~(1 << RW);
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	9f 7d       	andi	r25, 0xDF	; 223
  ba:	92 bb       	out	0x12, r25	; 18
	LCD_SIG_PORT |= (1 << RS);
  bc:	92 b3       	in	r25, 0x12	; 18
  be:	90 64       	ori	r25, 0x40	; 64
  c0:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT = data;
  c2:	85 bb       	out	0x15, r24	; 21
	LCD_SIG_PORT |= (1 << EN);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_char+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_char+0x1e>
  d4:	00 00       	nop
	_delay_ms(1);
	LCD_SIG_PORT &= ~(1 << EN);
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	82 bb       	out	0x12, r24	; 18
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_char+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_char+0x30>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_string>:
	_delay_ms(1);
}

void LCD_string(const char *str)
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != '\0'; i++)
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	03 c0       	rjmp	.+6      	; 0x100 <LCD_string+0x16>
	{
		LCD_char(str[i]);
  fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	_delay_ms(1);
}

void LCD_string(const char *str)
{
	for (int i = 0; str[i] != '\0'; i++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	80 81       	ld	r24, Z
 108:	81 11       	cpse	r24, r1
 10a:	f7 cf       	rjmp	.-18     	; 0xfa <LCD_string+0x10>
	{
		LCD_char(str[i]);
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <LCD_init>:

void LCD_init()
{
	// set GPIO LCD
	DDRC = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 11a:	81 bb       	out	0x11, r24	; 17
	LCD_SIG_PORT |= (1 << RW) | (1 << RS) | (1 << EN);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	80 6e       	ori	r24, 0xE0	; 224
 120:	82 bb       	out	0x12, r24	; 18

	// Init LCD
	LCD_command(0x38);
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x0C);
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x01);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 134:	08 95       	ret

00000136 <main>:
}
int main()
{

	LCD_init();
 136:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_init>

	LCD_command(0x80);
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_string("Hello DA2`");
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_command(0xC0);
 148:	80 ec       	ldi	r24, 0xC0	; 192
 14a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_string("AAAAAA");
 14e:	8b e6       	ldi	r24, 0x6B	; 107
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x20>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
